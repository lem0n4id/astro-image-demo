---
import crypto from "crypto";
import type ImageConfig from "/src/interfaces/ImageConfig.ts";
import getImage from "../utils/getImage.js";
import astroConfig from "/astro.config";

const {
  src,
  alt,
  preload,
  loading = preload ? "eager" : "lazy",
  decoding = "async",
  breakpoints,
  objectFit = "cover",
  objectPosition = "50% 50%",
  layout = "constrained",
  placeholder = "blurred",
  artDirectives,
  format = ["avif", "webp"],
  formatOptions = {
    tracedSVG: {
      function: "trace",
    },
  },
  fallbackFormat,
  includeSourceFormat = true,
  ...configOptions
} = Astro.props as ImageConfig;

const label = `Image at ${src} optimized in`;

console.time(label);
const images = await getImage(
  src,
  format,
  breakpoints,
  placeholder,
  artDirectives,
  fallbackFormat,
  includeSourceFormat,
  formatOptions,
  configOptions,
  astroConfig.image
);
console.timeEnd(label);

const uuid = `astro-image-${crypto
  .randomBytes(4)
  .toString("hex")
  .toUpperCase()}`;

const { width, height } = images.at(-1).sizes;

const imagesrcset =
  preload &&
  images.at(-1).sources.find(({ format: fmt }) => fmt === preload)?.srcset;
const imagesizes = `(min-width: ${width}px) ${width}px, 100vw`;

const StyleSheet = "style";

const bgStyles = images
  .map(({ media, fallback, object }) =>
    fallback
      ? media
        ? `@media ${media} {
  .${uuid} {
    object-fit: ${object?.fit || objectFit};
    object-position: ${object?.position || objectPosition};
    background-image: url('${encodeURI(fallback)}');
    background-size: ${object?.fit || objectFit};
    background-position: ${object?.position || objectPosition};
  }
}`
        : `.${uuid} {
  object-fit: ${objectFit};
  object-position: ${objectPosition};
  background-image: url('${encodeURI(fallback)}');
  background-size: ${objectFit};
  background-position: ${objectPosition};
}`
      : null
  )
  .filter(Boolean);
---

{preload && (
  <link
    rel="preload"
    as="image"
    imagesrcset={imagesrcset}
    imagesizes={imagesizes}
  />
)}

{bgStyles.length > 0 && (
  <StyleSheet>{bgStyles.reverse().join("\n\n")}</StyleSheet>
)}

{images.length > 1 && `<picture>`}
{images.map(({ media, sources, sizes, object }) => (
  <Fragment>
    {sources.map(({ format, src, srcset }) =>
      src ? (
        <img
          class={uuid}
          src={src}
          alt={alt}
          {...sizes}
          srcset={srcset}
          loading={loading}
          sizes={imagesizes}
          decoding={decoding}
          onload="style.backgroundImage = 'none'"
          style={
            layout === "fill"
              ? `width: 100%; height: 100%;`
              : layout === "fullWidth"
              ? `width: 100%; height: auto;`
              : layout === "constrained"
              ? "max-width: 100%; height: auto;"
              : null
          }
        />
      ) : (
        <source
          {...sizes}
          media={media}
          type={`image/${format}`}
          srcset={srcset}
          sizes={imagesizes}
        />
      )
    )}
  </Fragment>
))}
{images.length > 1 && `</picture>`}

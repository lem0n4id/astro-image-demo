---
import type ImageConfig from "/src/interfaces/ImageConfig.ts";
import getImage from "../utils/getImage.js";
import astroConfig from "/astro.config";

import getBackgroundStyles from "../utils/getBackgroundStyles.js";

const {
  src,
  alt,
  preload,
  loading = preload ? "eager" : "lazy",
  decoding = "async",
  breakpoints,
  objectFit = "cover",
  objectPosition = "50% 50%",
  layout = "constrained",
  placeholder = "blurred",
  artDirectives,
  format = ["avif", "webp"],
  formatOptions = {
    tracedSVG: {
      function: "trace",
    },
  },
  fallbackFormat,
  includeSourceFormat = true,
  ...configOptions
} = Astro.props as ImageConfig;

const label = `Image at ${src} optimized in`;

console.time(label);
const { uuid, images } = await getImage(
  src,
  format,
  breakpoints,
  placeholder,
  artDirectives,
  fallbackFormat,
  includeSourceFormat,
  formatOptions,
  configOptions,
  astroConfig.image
);
console.timeEnd(label);

const { width, height } = images.at(-1).sizes;

const imagesrcset =
  preload &&
  images.at(-1).sources.find(({ format: fmt }) => fmt === preload)?.srcset;
const imagesizes = `(min-width: ${width}px) ${width}px, 100vw`;

const bgStyles = getBackgroundStyles(images, uuid, objectFit, objectPosition);
---

{preload && (
  <link
    rel="preload"
    as="image"
    imagesrcset={imagesrcset}
    imagesizes={imagesizes}
  />
)}

{bgStyles.length > 0 && <style set:html={bgStyles.join("\n\n")}></style>}

{(() => {
  const sources = images.map(({ media, sources, sizes, object }) => (
    <Fragment>
      {sources.map(({ format, src, srcset }) =>
        src ? (
          <img
            class={uuid}
            src={src}
            alt={alt}
            {...sizes}
            srcset={srcset}
            loading={loading}
            sizes={imagesizes}
            decoding={decoding}
            onload="style.backgroundImage = 'none'"
            style={
              layout === "fill"
                ? `width: 100%; height: 100%;`
                : layout === "fullWidth"
                ? `width: 100%; height: auto;`
                : layout === "constrained"
                ? "max-width: 100%; height: auto;"
                : null
            }
          />
        ) : (
          <source
            {...sizes}
            media={media}
            type={`image/${format}`}
            srcset={srcset}
            sizes={imagesizes}
          />
        )
      )}
    </Fragment>
  ));

  return images.length > 1 ? <picture>{sources}</picture> : sources;
})()}
